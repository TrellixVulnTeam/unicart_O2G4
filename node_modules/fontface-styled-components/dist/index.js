!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("os")},function(e,t,n){const r=n(1),o=n(13),i=n(0);e.exports={copyFile:(e,t)=>new Promise((n,s)=>{o.sync(i.dirname(t)),r.copyFile(e,t,e=>e?s(e):n())}),readDir:(e,t,n,o=!0)=>new Promise((s,a)=>{r.readdir(e,async(c,l)=>{c&&a(Error(`Failed to scan directory '${e}': ${c}`)),l&&0!==l.length&&0!==l.filter(e=>!!e.match(t)).length||(n?s([]):a(Error(`No font files found in '${e}'. Are you sure it's the right path?`))),s(l.filter(e=>!!e.match(t)).map(t=>{const n=i.join(e,t);return{path:n,content:o?r.readFileSync(n):void 0}}))})}),writeFile:(e,t)=>new Promise((n,s)=>{o.sync(i.dirname(e)),r.writeFile(e,t,e=>e?s(e):n())})}},function(e,t){e.exports=require("stream")},function(e,t,n){const r=n(6),o=n(1),i=n(0);e.exports=(e,t,n)=>!(!0===o.existsSync(e)&&!t)||(n||process.stdout.write(r.dim(`Font '${i.basename(e)}' already exists in the output directory. Run with 'forceRefresh: true' to overwrite the existing font.\n`)),!1)},function(e,t,n){"use strict";const r=n(20),{stdout:o,stderr:i}=n(25),{stringReplaceAll:s,stringEncaseCRLFWithFirstIndex:a}=n(28),c=["ansi","ansi","ansi256","ansi16m"],l=Object.create(null);class u{constructor(e){return f(e)}}const f=e=>{const t={};return((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const n=o?o.level:0;e.level=void 0===t.level?n:t.level})(t,e),t.template=(...e)=>w(t.template,...e),Object.setPrototypeOf(t,d.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=()=>{throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.")},t.template.Instance=u,t.template};function d(e){return f(e)}for(const[e,t]of Object.entries(r))l[e]={get(){const n=g(this,h(t.open,t.close,this._styler),this._isEmpty);return Object.defineProperty(this,e,{value:n}),n}};l.visible={get(){const e=g(this,this._styler,!0);return Object.defineProperty(this,"visible",{value:e}),e}};const p=["rgb","hex","keyword","hsl","hsv","hwb","ansi","ansi256"];for(const e of p)l[e]={get(){const{level:t}=this;return function(...n){const o=h(r.color[c[t]][e](...n),r.color.close,this._styler);return g(this,o,this._isEmpty)}}};for(const e of p){l["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:t}=this;return function(...n){const o=h(r.bgColor[c[t]][e](...n),r.bgColor.close,this._styler);return g(this,o,this._isEmpty)}}}}const m=Object.defineProperties(()=>{},{...l,level:{enumerable:!0,get(){return this._generator.level},set(e){this._generator.level=e}}}),h=(e,t,n)=>{let r,o;return void 0===n?(r=e,o=t):(r=n.openAll+e,o=t+n.closeAll),{open:e,close:t,openAll:r,closeAll:o,parent:n}},g=(e,t,n)=>{const r=(...e)=>b(r,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(r,m),r._generator=e,r._styler=t,r._isEmpty=n,r},b=(e,t)=>{if(e.level<=0||!t)return e._isEmpty?"":t;let n=e._styler;if(void 0===n)return t;const{openAll:r,closeAll:o}=n;if(-1!==t.indexOf(""))for(;void 0!==n;)t=s(t,n.close,n.open),n=n.parent;const i=t.indexOf("\n");return-1!==i&&(t=a(t,o,r,i)),r+t+o};let y;const w=(e,...t)=>{const[r]=t;if(!Array.isArray(r))return t.join(" ");const o=t.slice(1),i=[r.raw[0]];for(let e=1;e<r.length;e++)i.push(String(o[e-1]).replace(/[{}\\]/g,"\\$&"),String(r.raw[e]));return void 0===y&&(y=n(29)),y(e,i.join(""))};Object.defineProperties(d.prototype,l);const x=d();x.supportsColor=o,x.stderr=d({level:i?i.level:0}),x.stderr.supportsColor=i,e.exports=x},function(e,t,n){const r=n(23),o={};for(const e of Object.keys(r))o[r[e]]=e;const i={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};e.exports=i;for(const e of Object.keys(i)){if(!("channels"in i[e]))throw new Error("missing channels property: "+e);if(!("labels"in i[e]))throw new Error("missing channel labels property: "+e);if(i[e].labels.length!==i[e].channels)throw new Error("channel and label counts mismatch: "+e);const{channels:t,labels:n}=i[e];delete i[e].channels,delete i[e].labels,Object.defineProperty(i[e],"channels",{value:t}),Object.defineProperty(i[e],"labels",{value:n})}i.rgb.hsl=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.min(t,n,r),i=Math.max(t,n,r),s=i-o;let a,c;i===o?a=0:t===i?a=(n-r)/s:n===i?a=2+(r-t)/s:r===i&&(a=4+(t-n)/s),a=Math.min(60*a,360),a<0&&(a+=360);const l=(o+i)/2;return c=i===o?0:l<=.5?s/(i+o):s/(2-i-o),[a,100*c,100*l]},i.rgb.hsv=function(e){let t,n,r,o,i;const s=e[0]/255,a=e[1]/255,c=e[2]/255,l=Math.max(s,a,c),u=l-Math.min(s,a,c),f=function(e){return(l-e)/6/u+.5};return 0===u?(o=0,i=0):(i=u/l,t=f(s),n=f(a),r=f(c),s===l?o=r-n:a===l?o=1/3+t-r:c===l&&(o=2/3+n-t),o<0?o+=1:o>1&&(o-=1)),[360*o,100*i,100*l]},i.rgb.hwb=function(e){const t=e[0],n=e[1];let r=e[2];const o=i.rgb.hsl(e)[0],s=1/255*Math.min(t,Math.min(n,r));return r=1-1/255*Math.max(t,Math.max(n,r)),[o,100*s,100*r]},i.rgb.cmyk=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.min(1-t,1-n,1-r);return[100*((1-t-o)/(1-o)||0),100*((1-n-o)/(1-o)||0),100*((1-r-o)/(1-o)||0),100*o]},i.rgb.keyword=function(e){const t=o[e];if(t)return t;let n,i=1/0;for(const t of Object.keys(r)){const o=r[t],c=(a=o,((s=e)[0]-a[0])**2+(s[1]-a[1])**2+(s[2]-a[2])**2);c<i&&(i=c,n=t)}var s,a;return n},i.keyword.rgb=function(e){return r[e]},i.rgb.xyz=function(e){let t=e[0]/255,n=e[1]/255,r=e[2]/255;return t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,n=n>.04045?((n+.055)/1.055)**2.4:n/12.92,r=r>.04045?((r+.055)/1.055)**2.4:r/12.92,[100*(.4124*t+.3576*n+.1805*r),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]},i.rgb.lab=function(e){const t=i.rgb.xyz(e);let n=t[0],r=t[1],o=t[2];return n/=95.047,r/=100,o/=108.883,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,o=o>.008856?o**(1/3):7.787*o+16/116,[116*r-16,500*(n-r),200*(r-o)]},i.hsl.rgb=function(e){const t=e[0]/360,n=e[1]/100,r=e[2]/100;let o,i,s;if(0===n)return s=255*r,[s,s,s];o=r<.5?r*(1+n):r+n-r*n;const a=2*r-o,c=[0,0,0];for(let e=0;e<3;e++)i=t+1/3*-(e-1),i<0&&i++,i>1&&i--,s=6*i<1?a+6*(o-a)*i:2*i<1?o:3*i<2?a+(o-a)*(2/3-i)*6:a,c[e]=255*s;return c},i.hsl.hsv=function(e){const t=e[0];let n=e[1]/100,r=e[2]/100,o=n;const i=Math.max(r,.01);return r*=2,n*=r<=1?r:2-r,o*=i<=1?i:2-i,[t,100*(0===r?2*o/(i+o):2*n/(r+n)),100*((r+n)/2)]},i.hsv.rgb=function(e){const t=e[0]/60,n=e[1]/100;let r=e[2]/100;const o=Math.floor(t)%6,i=t-Math.floor(t),s=255*r*(1-n),a=255*r*(1-n*i),c=255*r*(1-n*(1-i));switch(r*=255,o){case 0:return[r,c,s];case 1:return[a,r,s];case 2:return[s,r,c];case 3:return[s,a,r];case 4:return[c,s,r];case 5:return[r,s,a]}},i.hsv.hsl=function(e){const t=e[0],n=e[1]/100,r=e[2]/100,o=Math.max(r,.01);let i,s;s=(2-n)*r;const a=(2-n)*o;return i=n*o,i/=a<=1?a:2-a,i=i||0,s/=2,[t,100*i,100*s]},i.hwb.rgb=function(e){const t=e[0]/360;let n=e[1]/100,r=e[2]/100;const o=n+r;let i;o>1&&(n/=o,r/=o);const s=Math.floor(6*t),a=1-r;i=6*t-s,0!=(1&s)&&(i=1-i);const c=n+i*(a-n);let l,u,f;switch(s){default:case 6:case 0:l=a,u=c,f=n;break;case 1:l=c,u=a,f=n;break;case 2:l=n,u=a,f=c;break;case 3:l=n,u=c,f=a;break;case 4:l=c,u=n,f=a;break;case 5:l=a,u=n,f=c}return[255*l,255*u,255*f]},i.cmyk.rgb=function(e){const t=e[0]/100,n=e[1]/100,r=e[2]/100,o=e[3]/100;return[255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o))]},i.xyz.rgb=function(e){const t=e[0]/100,n=e[1]/100,r=e[2]/100;let o,i,s;return o=3.2406*t+-1.5372*n+-.4986*r,i=-.9689*t+1.8758*n+.0415*r,s=.0557*t+-.204*n+1.057*r,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,i=i>.0031308?1.055*i**(1/2.4)-.055:12.92*i,s=s>.0031308?1.055*s**(1/2.4)-.055:12.92*s,o=Math.min(Math.max(0,o),1),i=Math.min(Math.max(0,i),1),s=Math.min(Math.max(0,s),1),[255*o,255*i,255*s]},i.xyz.lab=function(e){let t=e[0],n=e[1],r=e[2];return t/=95.047,n/=100,r/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,[116*n-16,500*(t-n),200*(n-r)]},i.lab.xyz=function(e){let t,n,r;n=(e[0]+16)/116,t=e[1]/500+n,r=n-e[2]/200;const o=n**3,i=t**3,s=r**3;return n=o>.008856?o:(n-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,r=s>.008856?s:(r-16/116)/7.787,t*=95.047,n*=100,r*=108.883,[t,n,r]},i.lab.lch=function(e){const t=e[0],n=e[1],r=e[2];let o;return o=360*Math.atan2(r,n)/2/Math.PI,o<0&&(o+=360),[t,Math.sqrt(n*n+r*r),o]},i.lch.lab=function(e){const t=e[0],n=e[1],r=e[2]/360*2*Math.PI;return[t,n*Math.cos(r),n*Math.sin(r)]},i.rgb.ansi16=function(e,t=null){const[n,r,o]=e;let s=null===t?i.rgb.hsv(e)[2]:t;if(s=Math.round(s/50),0===s)return 30;let a=30+(Math.round(o/255)<<2|Math.round(r/255)<<1|Math.round(n/255));return 2===s&&(a+=60),a},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){const t=e[0],n=e[1],r=e[2];return t===n&&n===r?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)},i.ansi16.rgb=function(e){let t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];const n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},i.ansi256.rgb=function(e){if(e>=232){const t=10*(e-232)+8;return[t,t,t]}let t;return e-=16,[Math.floor(e/36)/5*255,Math.floor((t=e%36)/6)/5*255,t%6/5*255]},i.rgb.hex=function(e){const t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){const t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];let n=t[0];3===t[0].length&&(n=n.split("").map(e=>e+e).join(""));const r=parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},i.rgb.hcg=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.max(Math.max(t,n),r),i=Math.min(Math.min(t,n),r),s=o-i;let a,c;return a=s<1?i/(1-s):0,c=s<=0?0:o===t?(n-r)/s%6:o===n?2+(r-t)/s:4+(t-n)/s,c/=6,c%=1,[360*c,100*s,100*a]},i.hsl.hcg=function(e){const t=e[1]/100,n=e[2]/100,r=n<.5?2*t*n:2*t*(1-n);let o=0;return r<1&&(o=(n-.5*r)/(1-r)),[e[0],100*r,100*o]},i.hsv.hcg=function(e){const t=e[1]/100,n=e[2]/100,r=t*n;let o=0;return r<1&&(o=(n-r)/(1-r)),[e[0],100*r,100*o]},i.hcg.rgb=function(e){const t=e[0]/360,n=e[1]/100,r=e[2]/100;if(0===n)return[255*r,255*r,255*r];const o=[0,0,0],i=t%1*6,s=i%1,a=1-s;let c=0;switch(Math.floor(i)){case 0:o[0]=1,o[1]=s,o[2]=0;break;case 1:o[0]=a,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=s;break;case 3:o[0]=0,o[1]=a,o[2]=1;break;case 4:o[0]=s,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=a}return c=(1-n)*r,[255*(n*o[0]+c),255*(n*o[1]+c),255*(n*o[2]+c)]},i.hcg.hsv=function(e){const t=e[1]/100,n=t+e[2]/100*(1-t);let r=0;return n>0&&(r=t/n),[e[0],100*r,100*n]},i.hcg.hsl=function(e){const t=e[1]/100,n=e[2]/100*(1-t)+.5*t;let r=0;return n>0&&n<.5?r=t/(2*n):n>=.5&&n<1&&(r=t/(2*(1-n))),[e[0],100*r,100*n]},i.hcg.hwb=function(e){const t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},i.hwb.hcg=function(e){const t=e[1]/100,n=1-e[2]/100,r=n-t;let o=0;return r<1&&(o=(n-r)/(1-r)),[e[0],100*r,100*o]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=function(e){return[0,0,e[0]]},i.gray.hsv=i.gray.hsl,i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){const t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},function(e,t){e.exports=require("child_process")},function(e,t,n){"use strict";const r=(e={})=>{const t=e.env||process.env;return"win32"!==(e.platform||process.platform)?"PATH":Object.keys(t).reverse().find(e=>"PATH"===e.toUpperCase())||"Path"};e.exports=r,e.exports.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SIGRTMAX=t.getRealtimeSignals=void 0;t.getRealtimeSignals=function(){const e=i-o+1;return Array.from({length:e},r)};const r=function(e,t){return{name:"SIGRT"+(t+1),number:o+t,action:"terminate",description:"Application-specific signal (realtime)",standard:"posix"}},o=34,i=64;t.SIGRTMAX=i},function(e,t,n){e.exports=n(12)},function(e,t,n){(function(t){const r=n(0),{readDir:o}=n(3),i=n(14),s=n(30);e.exports={run:async e=>{const{sourceDir:n="assets/fonts/",fontOutputDir:a="dist/fonts/",fontsPublicDir:c="/public/fonts/",cssOutputDir:l="dist/src/fontfaces/",scssOutputDir:u="dist/src/fontfaces/",styledOutputDir:f="dist/src/fontfaces/",allowEmpty:d=!1,forceRefresh:p=!1,quiet:m=!1,fontDisplay:h=null,withLocal:g=!0,withStyledComponents:b=!0,withCSS:y=!1,withSCSS:w=!1}=e,x=r.resolve(t,n);[...await s(x,{fontOutputDir:a,forceRefresh:p,quiet:m}),...await o(x,/.*\.(ttf)$/,d)].map(e=>i(e,{fontsPublicDir:c,fontOutputDir:r.resolve(t,a),cssOutputDir:r.resolve(t,l),scssOutputDir:r.resolve(t,u),styledOutputDir:r.resolve(t,f),forceRefresh:p,quiet:m,fontDisplay:h,withLocal:g,withStyledComponents:b,withCSS:y,withSCSS:w}))}}}).call(this,"lib")},function(e,t){e.exports=require("mkdirp")},function(e,t,n){const r=n(1),o=n(0),i=n(15),s=n(16),a=n(17),c=n(18),{copyFile:l,writeFile:u}=n(3),{camelCase:f,capitalize:d}=n(19),p=n(5),m={eot:s,woff:a,woff2:c,ttf:e=>Buffer.from(e)},h=(e,t,n,{fontOutputDir:o,forceRefresh:i,quiet:s})=>{const a=Object.keys(m).map(async a=>{const c=`${e}/${t}.${a}`,f=`${o}/${t}.${a}`;if(!p(f,i,s))return;if(!0===r.existsSync(c))return void await l(c,f);const d=((e,t)=>{const n=(0,m[e])(new Uint8Array(t));return Buffer.from(n.buffer)})(a,n);await u(f,d)});return Promise.all(a)},g=e=>new Promise((t,n)=>i(e,(e,r)=>e?n(e):t(r))),b=(e,t)=>{const n=e.tables.name[1];return null!==n&&n.length>2?{fontFamily:n,fontWeight:e.tables["OS/2"].weightClass||400,fontStyle:0===e.tables.post.italicAngle?"normal":"italic"}:{fontFamily:d(t),fontWeight:400,fontStyle:"normal"}},y=async(e,t,n,r)=>{const o=`${e}/${f(t)}.${n}`;await u(o,r)},w=async(e,t,n,r)=>{const o=await g(n),i=b(o,t),s=f(t);await y(r.styledOutputDir,t,"style.js",`import { createGlobalStyle } from 'styled-components'\n\nexport const ${s}FontFace = createGlobalStyle\`\n  @font-face {\n    font-display: ${r.fontDisplay||"${(props) => props.fontDisplay || 'auto'}"};\n    font-family: '${i.fontFamily}';\n    font-weight: ${i.fontWeight};\n    font-style: ${i.fontStyle};\n    src: ${r.withLocal?`local('${i.fontFamily}'),\n        `:""}url('${r.fontsPublicDir}/${t}.eot?#iefix') format('embedded-opentype'),\n        url('${r.fontsPublicDir}/${t}.woff2') format('woff2'),\n        url('${r.fontsPublicDir}/${t}.ttf')  format('truetype'),\n        url('${r.fontsPublicDir}/${t}.woff') format('woff');\n  }\n  \`\n\nexport default { ${s}FontFace }\n    `)},x=async(e,t,n,r)=>{const o=await g(n),i=b(o,t);await y(r.cssOutputDir,t,"css",`@font-face {\n    font-display: ${r.fontDisplay||"auto"};\n    font-family: '${i.fontFamily}';\n    font-weight: ${i.fontWeight};\n    font-style: ${i.fontStyle};\n    src: ${r.withLocal?`local('${i.fontFamily}'),\n        `:""}url('${r.fontsPublicDir}/${t}.eot?#iefix') format('embedded-opentype'),\n        url('${r.fontsPublicDir}/${t}.woff2') format('woff2'),\n        url('${r.fontsPublicDir}/${t}.ttf')  format('truetype'),\n        url('${r.fontsPublicDir}/${t}.woff') format('woff');\n  }`)},v=async(e,t,n,r)=>{const o=await g(n),i=b(o,t);await y(r.scssOutputDir,t,"scss",`\n$display: 'auto' !default;\n@font-face {\n  font-family: '${i.fontFamily}';\n  font-weight: ${i.fontWeight};\n  font-style: ${i.fontStyle};\n\tfont-display: #{$display};\n  src: ${r.withLocal?`local('${i.fontFamily}'),\n      `:""}url('${r.fontsPublicDir}/${t}.eot?#iefix') format('embedded-opentype'),\n      url('${r.fontsPublicDir}/${t}.woff2') format('woff2'),\n      url('${r.fontsPublicDir}/${t}.ttf')  format('truetype'),\n      url('${r.fontsPublicDir}/${t}.woff') format('woff');\n}`)};e.exports=async(e,t)=>{const n=o.dirname(e.path),r=o.basename(e.path,".ttf");await Promise.all([h(n,r,e.content,t),t.withStyledComponents&&w(0,r,e.content,t),t.withCSS&&x(0,r,e.content,t),t.withSCSS&&v(0,r,e.content,t)].filter(Boolean))}},function(e,t){e.exports=require("ttfinfo")},function(e,t){e.exports=require("ttf2eot")},function(e,t){e.exports=require("ttf2woff")},function(e,t){e.exports=require("ttf2woff2")},function(e,t){const n=e=>e.replace("-"," ").replace(/(?:^|\s)\S/g,e=>e.toUpperCase());e.exports={camelCase:e=>n(e).replace(" ",""),capitalize:n}},function(e,t,n){"use strict";(function(e){const t=(e,t)=>(...n)=>`[${e(...n)+t}m`,r=(e,t)=>(...n)=>{const r=e(...n);return`[${38+t};5;${r}m`},o=(e,t)=>(...n)=>{const r=e(...n);return`[${38+t};2;${r[0]};${r[1]};${r[2]}m`},i=e=>e,s=(e,t,n)=>[e,t,n],a=(e,t,n)=>{Object.defineProperty(e,t,{get:()=>{const r=n();return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0}),r},enumerable:!0,configurable:!0})};let c;const l=(e,t,r,o)=>{void 0===c&&(c=n(22));const i=o?10:0,s={};for(const[n,o]of Object.entries(c)){const a="ansi16"===n?"ansi":n;n===t?s[a]=e(r,i):"object"==typeof o&&(s[a]=e(o[t],i))}return s};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){const e=new Map,n={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};n.color.gray=n.color.blackBright,n.bgColor.bgGray=n.bgColor.bgBlackBright,n.color.grey=n.color.blackBright,n.bgColor.bgGrey=n.bgColor.bgBlackBright;for(const[t,r]of Object.entries(n)){for(const[t,o]of Object.entries(r))n[t]={open:`[${o[0]}m`,close:`[${o[1]}m`},r[t]=n[t],e.set(o[0],o[1]);Object.defineProperty(n,t,{value:r,enumerable:!1})}return Object.defineProperty(n,"codes",{value:e,enumerable:!1}),n.color.close="[39m",n.bgColor.close="[49m",a(n.color,"ansi",()=>l(t,"ansi16",i,!1)),a(n.color,"ansi256",()=>l(r,"ansi256",i,!1)),a(n.color,"ansi16m",()=>l(o,"rgb",s,!1)),a(n.bgColor,"ansi",()=>l(t,"ansi16",i,!0)),a(n.bgColor,"ansi256",()=>l(r,"ansi256",i,!0)),a(n.bgColor,"ansi16m",()=>l(o,"rgb",s,!0)),n}})}).call(this,n(21)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){const r=n(7),o=n(24),i={};Object.keys(r).forEach(e=>{i[e]={},Object.defineProperty(i[e],"channels",{value:r[e].channels}),Object.defineProperty(i[e],"labels",{value:r[e].labels});const t=o(e);Object.keys(t).forEach(n=>{const r=t[n];i[e][n]=function(e){const t=function(...t){const n=t[0];if(null==n)return n;n.length>1&&(t=n);const r=e(t);if("object"==typeof r)for(let e=r.length,t=0;t<e;t++)r[t]=Math.round(r[t]);return r};return"conversion"in e&&(t.conversion=e.conversion),t}(r),i[e][n].raw=function(e){const t=function(...t){const n=t[0];return null==n?n:(n.length>1&&(t=n),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(r)})}),e.exports=i},function(e,t,n){"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,n){const r=n(7);function o(e){const t=function(){const e={},t=Object.keys(r);for(let n=t.length,r=0;r<n;r++)e[t[r]]={distance:-1,parent:null};return e}(),n=[e];for(t[e].distance=0;n.length;){const e=n.pop(),o=Object.keys(r[e]);for(let r=o.length,i=0;i<r;i++){const r=o[i],s=t[r];-1===s.distance&&(s.distance=t[e].distance+1,s.parent=e,n.unshift(r))}}return t}function i(e,t){return function(n){return t(e(n))}}function s(e,t){const n=[t[e].parent,e];let o=r[t[e].parent][e],s=t[e].parent;for(;t[s].parent;)n.unshift(t[s].parent),o=i(r[t[s].parent][s],o),s=t[s].parent;return o.conversion=n,o}e.exports=function(e){const t=o(e),n={},r=Object.keys(t);for(let e=r.length,o=0;o<e;o++){const e=r[o];null!==t[e].parent&&(n[e]=s(e,t))}return n}},function(e,t,n){"use strict";const r=n(2),o=n(26),i=n(27),{env:s}=process;let a;function c(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function l(e,t){if(0===a)return 0;if(i("color=16m")||i("color=full")||i("color=truecolor"))return 3;if(i("color=256"))return 2;if(e&&!t&&void 0===a)return 0;const n=a||0;if("dumb"===s.TERM)return n;if("win32"===process.platform){const e=r.release().split(".");return Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in s)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(e=>e in s)||"codeship"===s.CI_NAME?1:n;if("TEAMCITY_VERSION"in s)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(s.TEAMCITY_VERSION)?1:0;if("GITHUB_ACTIONS"in s)return 1;if("truecolor"===s.COLORTERM)return 3;if("TERM_PROGRAM"in s){const e=parseInt((s.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(s.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(s.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(s.TERM)||"COLORTERM"in s?1:n}i("no-color")||i("no-colors")||i("color=false")||i("color=never")?a=0:(i("color")||i("colors")||i("color=true")||i("color=always"))&&(a=1),"FORCE_COLOR"in s&&(a="true"===s.FORCE_COLOR?1:"false"===s.FORCE_COLOR?0:0===s.FORCE_COLOR.length?1:Math.min(parseInt(s.FORCE_COLOR,10),3)),e.exports={supportsColor:function(e){return c(l(e,e&&e.isTTY))},stdout:c(l(!0,o.isatty(1))),stderr:c(l(!0,o.isatty(2)))}},function(e,t){e.exports=require("tty")},function(e,t,n){"use strict";e.exports=(e,t=process.argv)=>{const n=e.startsWith("-")?"":1===e.length?"-":"--",r=t.indexOf(n+e),o=t.indexOf("--");return-1!==r&&(-1===o||r<o)}},function(e,t,n){"use strict";e.exports={stringReplaceAll:(e,t,n)=>{let r=e.indexOf(t);if(-1===r)return e;const o=t.length;let i=0,s="";do{s+=e.substr(i,r-i)+t+n,i=r+o,r=e.indexOf(t,i)}while(-1!==r);return s+=e.substr(i),s},stringEncaseCRLFWithFirstIndex:(e,t,n,r)=>{let o=0,i="";do{const s="\r"===e[r-1];i+=e.substr(o,(s?r-1:r)-o)+t+(s?"\r\n":"\n")+n,o=r+1,r=e.indexOf("\n",o)}while(-1!==r);return i+=e.substr(o),i}}},function(e,t,n){"use strict";const r=/(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,o=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,i=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,s=/\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi,a=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function c(e){const t="u"===e[0],n="{"===e[1];return t&&!n&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):t&&n?String.fromCodePoint(parseInt(e.slice(2,-1),16)):a.get(e)||e}function l(e,t){const n=[],r=t.trim().split(/\s*,\s*/g);let o;for(const t of r){const r=Number(t);if(Number.isNaN(r)){if(!(o=t.match(i)))throw new Error(`Invalid Chalk template style argument: ${t} (in style '${e}')`);n.push(o[2].replace(s,(e,t,n)=>t?c(t):n))}else n.push(r)}return n}function u(e){o.lastIndex=0;const t=[];let n;for(;null!==(n=o.exec(e));){const e=n[1];if(n[2]){const r=l(e,n[2]);t.push([e].concat(r))}else t.push([e])}return t}function f(e,t){const n={};for(const e of t)for(const t of e.styles)n[t[0]]=e.inverse?null:t.slice(1);let r=e;for(const[e,t]of Object.entries(n))if(Array.isArray(t)){if(!(e in r))throw new Error("Unknown Chalk style: "+e);r=t.length>0?r[e](...t):r[e]}return r}e.exports=(e,t)=>{const n=[],o=[];let i=[];if(t.replace(r,(t,r,s,a,l,d)=>{if(r)i.push(c(r));else if(a){const t=i.join("");i=[],o.push(0===n.length?t:f(e,n)(t)),n.push({inverse:s,styles:u(a)})}else if(l){if(0===n.length)throw new Error("Found extraneous } in Chalk template literal");o.push(f(e,n)(i.join(""))),i=[],n.pop()}else i.push(d)}),o.push(i.join("")),n.length>0){const e=`Chalk template literal is missing ${n.length} closing bracket${1===n.length?"":"s"} (\`}\`)`;throw new Error(e)}return o.join("")}},function(e,t,n){const r=n(6),o=n(31),i=n(1),s=n(2),{readDir:a}=n(3),c=n(5);e.exports=async(e,{fontOutputDir:t,forceRefresh:n,quiet:l})=>{const u=await a(e,/.*\.(otf)$/,!0,!1);if(!u.length)return[];let f=!0;try{await o("fontforge",["-v"])}catch(e){if("ENOENT"!==e.code)throw e;f=!1}if(!f)return process.stderr.write(r.bgYellowBright.black.bold(`OpenType fonts were found in '${e}' but FontForge is not installed. Fonts will not be generated for these OpenType source files.\n`)),[];const d=[];for(const r of u){const a=r.path.slice(0,-4).replace(e,t)+".ttf";if(c(a,n,l)){const t=r.path.slice(0,-4).replace(e,s.tmpdir())+".ttf";await o("fontforge",["--lang=ff","-c",`Open('${r.path}'); Generate('${t}'); Quit(0);`]),d.push({path:t,content:i.readFileSync(t)})}else d.push({path:a,content:i.readFileSync(a)})}return d}},function(e,t,n){"use strict";const r=n(0),o=n(8),i=n(32),s=n(44),a=n(45),c=n(46),l=n(48),u=n(52),{spawnedKill:f,spawnedCancel:d,setupTimeout:p,validateTimeout:m,setExitHandler:h}=n(53),{handleInput:g,getSpawnedResult:b,makeAllStream:y,validateInputSync:w}=n(58),{mergePromise:x,getSpawnedPromise:v}=n(65),{joinCommand:S,parseCommand:O,getEscapedCommand:E}=n(66),C=(e,t,n={})=>{const o=i._parse(e,t,n);return e=o.command,t=o.args,(n={maxBuffer:1e8,buffer:!0,stripFinalNewline:!0,extendEnv:!0,preferLocal:!1,localDir:(n=o.options).cwd||process.cwd(),execPath:process.execPath,encoding:"utf8",reject:!0,cleanup:!0,all:!1,windowsHide:!0,...n}).env=(({env:e,extendEnv:t,preferLocal:n,localDir:r,execPath:o})=>{const i=t?{...process.env,...e}:e;return n?a.env({env:i,cwd:r,execPath:o}):i})(n),n.stdio=u(n),"win32"===process.platform&&"cmd"===r.basename(e,".exe")&&t.unshift("/q"),{file:e,args:t,options:n,parsed:o}},I=(e,t,n)=>"string"==typeof t||Buffer.isBuffer(t)?e.stripFinalNewline?s(t):t:void 0===n?void 0:"",$=(e,t,n)=>{const r=C(e,t,n),i=S(e,t),s=E(e,t);let a;m(r.options);try{a=o.spawn(r.file,r.args,r.options)}catch(e){const t=new o.ChildProcess,n=Promise.reject(l({error:e,stdout:"",stderr:"",all:"",command:i,escapedCommand:s,parsed:r,timedOut:!1,isCanceled:!1,killed:!1}));return x(t,n)}const u=v(a),w=p(a,r.options,u),O=h(a,r.options,w),$={isCanceled:!1};a.kill=f.bind(null,a.kill.bind(a)),a.cancel=d.bind(null,a,$);const k=c(async()=>{const[{error:e,exitCode:t,signal:n,timedOut:o},c,u,f]=await b(a,r.options,O),d=I(r.options,c),p=I(r.options,u),m=I(r.options,f);if(e||0!==t||null!==n){const c=l({error:e,exitCode:t,signal:n,stdout:d,stderr:p,all:m,command:i,escapedCommand:s,parsed:r,timedOut:o,isCanceled:$.isCanceled,killed:a.killed});if(!r.options.reject)return c;throw c}return{command:i,escapedCommand:s,exitCode:0,stdout:d,stderr:p,all:m,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}});return g(a,r.options.input),a.all=y(a,r.options),x(a,k)};e.exports=$,e.exports.sync=(e,t,n)=>{const r=C(e,t,n),i=S(e,t),s=E(e,t);let a;w(r.options);try{a=o.spawnSync(r.file,r.args,r.options)}catch(e){throw l({error:e,stdout:"",stderr:"",all:"",command:i,escapedCommand:s,parsed:r,timedOut:!1,isCanceled:!1,killed:!1})}const c=I(r.options,a.stdout,a.error),u=I(r.options,a.stderr,a.error);if(a.error||0!==a.status||null!==a.signal){const e=l({stdout:c,stderr:u,error:a.error,signal:a.signal,exitCode:a.status,command:i,escapedCommand:s,parsed:r,timedOut:a.error&&"ETIMEDOUT"===a.error.code,isCanceled:!1,killed:null!==a.signal});if(!r.options.reject)return e;throw e}return{command:i,escapedCommand:s,exitCode:0,stdout:c,stderr:u,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}},e.exports.command=(e,t)=>{const[n,...r]=O(e);return $(n,r,t)},e.exports.commandSync=(e,t)=>{const[n,...r]=O(e);return $.sync(n,r,t)},e.exports.node=(e,t,n={})=>{t&&!Array.isArray(t)&&"object"==typeof t&&(n=t,t=[]);const r=u.node(n),o=process.execArgv.filter(e=>!e.startsWith("--inspect")),{nodePath:i=process.execPath,nodeOptions:s=o}=n;return $(i,[...s,e,...Array.isArray(t)?t:[]],{...n,stdin:void 0,stdout:void 0,stderr:void 0,stdio:r,shell:!1})}},function(e,t,n){"use strict";const r=n(8),o=n(33),i=n(43);function s(e,t,n){const s=o(e,t,n),a=r.spawn(s.command,s.args,s.options);return i.hookChildProcess(a,s),a}e.exports=s,e.exports.spawn=s,e.exports.sync=function(e,t,n){const s=o(e,t,n),a=r.spawnSync(s.command,s.args,s.options);return a.error=a.error||i.verifyENOENTSync(a.status,s),a},e.exports._parse=o,e.exports._enoent=i},function(e,t,n){"use strict";const r=n(0),o=n(34),i=n(39),s=n(40),a="win32"===process.platform,c=/\.(?:com|exe)$/i,l=/node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;function u(e){if(!a)return e;const t=function(e){e.file=o(e);const t=e.file&&s(e.file);return t?(e.args.unshift(e.file),e.command=t,o(e)):e.file}(e),n=!c.test(t);if(e.options.forceShell||n){const n=l.test(t);e.command=r.normalize(e.command),e.command=i.command(e.command),e.args=e.args.map(e=>i.argument(e,n));const o=[e.command].concat(e.args).join(" ");e.args=["/d","/s","/c",`"${o}"`],e.command=process.env.comspec||"cmd.exe",e.options.windowsVerbatimArguments=!0}return e}e.exports=function(e,t,n){t&&!Array.isArray(t)&&(n=t,t=null);const r={command:e,args:t=t?t.slice(0):[],options:n=Object.assign({},n),file:void 0,original:{command:e,args:t}};return n.shell?r:u(r)}},function(e,t,n){"use strict";const r=n(0),o=n(35),i=n(9);function s(e,t){const n=e.options.env||process.env,s=process.cwd(),a=null!=e.options.cwd,c=a&&void 0!==process.chdir&&!process.chdir.disabled;if(c)try{process.chdir(e.options.cwd)}catch(e){}let l;try{l=o.sync(e.command,{path:n[i({env:n})],pathExt:t?r.delimiter:void 0})}catch(e){}finally{c&&process.chdir(s)}return l&&(l=r.resolve(a?e.options.cwd:"",l)),l}e.exports=function(e){return s(e)||s(e,!0)}},function(e,t,n){const r="win32"===process.platform||"cygwin"===process.env.OSTYPE||"msys"===process.env.OSTYPE,o=n(0),i=r?";":":",s=n(36),a=e=>Object.assign(new Error("not found: "+e),{code:"ENOENT"}),c=(e,t)=>{const n=t.colon||i,o=e.match(/\//)||r&&e.match(/\\/)?[""]:[...r?[process.cwd()]:[],...(t.path||process.env.PATH||"").split(n)],s=r?t.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",a=r?s.split(n):[""];return r&&-1!==e.indexOf(".")&&""!==a[0]&&a.unshift(""),{pathEnv:o,pathExt:a,pathExtExe:s}},l=(e,t,n)=>{"function"==typeof t&&(n=t,t={}),t||(t={});const{pathEnv:r,pathExt:i,pathExtExe:l}=c(e,t),u=[],f=n=>new Promise((i,s)=>{if(n===r.length)return t.all&&u.length?i(u):s(a(e));const c=r[n],l=/^".*"$/.test(c)?c.slice(1,-1):c,f=o.join(l,e),p=!l&&/^\.[\\\/]/.test(e)?e.slice(0,2)+f:f;i(d(p,n,0))}),d=(e,n,r)=>new Promise((o,a)=>{if(r===i.length)return o(f(n+1));const c=i[r];s(e+c,{pathExt:l},(i,s)=>{if(!i&&s){if(!t.all)return o(e+c);u.push(e+c)}return o(d(e,n,r+1))})});return n?f(0).then(e=>n(null,e),n):f(0)};e.exports=l,l.sync=(e,t)=>{t=t||{};const{pathEnv:n,pathExt:r,pathExtExe:i}=c(e,t),l=[];for(let a=0;a<n.length;a++){const c=n[a],u=/^".*"$/.test(c)?c.slice(1,-1):c,f=o.join(u,e),d=!u&&/^\.[\\\/]/.test(e)?e.slice(0,2)+f:f;for(let e=0;e<r.length;e++){const n=d+r[e];try{if(s.sync(n,{pathExt:i})){if(!t.all)return n;l.push(n)}}catch(e){}}}if(t.all&&l.length)return l;if(t.nothrow)return null;throw a(e)}},function(e,t,n){var r;n(1);function o(e,t,n){if("function"==typeof t&&(n=t,t={}),!n){if("function"!=typeof Promise)throw new TypeError("callback not provided");return new Promise((function(n,r){o(e,t||{},(function(e,t){e?r(e):n(t)}))}))}r(e,t||{},(function(e,r){e&&("EACCES"===e.code||t&&t.ignoreErrors)&&(e=null,r=!1),n(e,r)}))}r="win32"===process.platform||global.TESTING_WINDOWS?n(37):n(38),e.exports=o,o.sync=function(e,t){try{return r.sync(e,t||{})}catch(e){if(t&&t.ignoreErrors||"EACCES"===e.code)return!1;throw e}}},function(e,t,n){e.exports=i,i.sync=function(e,t){return o(r.statSync(e),e,t)};var r=n(1);function o(e,t,n){return!(!e.isSymbolicLink()&&!e.isFile())&&function(e,t){var n=void 0!==t.pathExt?t.pathExt:process.env.PATHEXT;if(!n)return!0;if(-1!==(n=n.split(";")).indexOf(""))return!0;for(var r=0;r<n.length;r++){var o=n[r].toLowerCase();if(o&&e.substr(-o.length).toLowerCase()===o)return!0}return!1}(t,n)}function i(e,t,n){r.stat(e,(function(r,i){n(r,!r&&o(i,e,t))}))}},function(e,t,n){e.exports=o,o.sync=function(e,t){return i(r.statSync(e),t)};var r=n(1);function o(e,t,n){r.stat(e,(function(e,r){n(e,!e&&i(r,t))}))}function i(e,t){return e.isFile()&&function(e,t){var n=e.mode,r=e.uid,o=e.gid,i=void 0!==t.uid?t.uid:process.getuid&&process.getuid(),s=void 0!==t.gid?t.gid:process.getgid&&process.getgid(),a=parseInt("100",8),c=parseInt("010",8),l=parseInt("001",8),u=a|c;return n&l||n&c&&o===s||n&a&&r===i||n&u&&0===i}(e,t)}},function(e,t,n){"use strict";const r=/([()\][%!^"`<>&|;, *?])/g;e.exports.command=function(e){return e=e.replace(r,"^$1")},e.exports.argument=function(e,t){return e=(e=`"${e=(e=(e=""+e).replace(/(\\*)"/g,'$1$1\\"')).replace(/(\\*)$/,"$1$1")}"`).replace(r,"^$1"),t&&(e=e.replace(r,"^$1")),e}},function(e,t,n){"use strict";const r=n(1),o=n(41);e.exports=function(e){const t=Buffer.alloc(150);let n;try{n=r.openSync(e,"r"),r.readSync(n,t,0,150,0),r.closeSync(n)}catch(e){}return o(t.toString())}},function(e,t,n){"use strict";const r=n(42);e.exports=(e="")=>{const t=e.match(r);if(!t)return null;const[n,o]=t[0].replace(/#! ?/,"").split(" "),i=n.split("/").pop();return"env"===i?o:o?`${i} ${o}`:i}},function(e,t,n){"use strict";e.exports=/^#!(.*)/},function(e,t,n){"use strict";const r="win32"===process.platform;function o(e,t){return Object.assign(new Error(`${t} ${e.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${t} ${e.command}`,path:e.command,spawnargs:e.args})}function i(e,t){return r&&1===e&&!t.file?o(t.original,"spawn"):null}e.exports={hookChildProcess:function(e,t){if(!r)return;const n=e.emit;e.emit=function(r,o){if("exit"===r){const r=i(o,t);if(r)return n.call(e,"error",r)}return n.apply(e,arguments)}},verifyENOENT:i,verifyENOENTSync:function(e,t){return r&&1===e&&!t.file?o(t.original,"spawnSync"):null},notFoundError:o}},function(e,t,n){"use strict";e.exports=e=>{const t="string"==typeof e?"\n":"\n".charCodeAt(),n="string"==typeof e?"\r":"\r".charCodeAt();return e[e.length-1]===t&&(e=e.slice(0,e.length-1)),e[e.length-1]===n&&(e=e.slice(0,e.length-1)),e}},function(e,t,n){"use strict";const r=n(0),o=n(9),i=e=>{let t;e={cwd:process.cwd(),path:process.env[o()],execPath:process.execPath,...e};let n=r.resolve(e.cwd);const i=[];for(;t!==n;)i.push(r.join(n,"node_modules/.bin")),t=n,n=r.resolve(n,"..");const s=r.resolve(e.cwd,e.execPath,"..");return i.push(s),i.concat(e.path).join(r.delimiter)};e.exports=i,e.exports.default=i,e.exports.env=t=>{const n={...(t={env:process.env,...t}).env},r=o({env:n});return t.path=n[r],n[r]=e.exports(t),n}},function(e,t,n){"use strict";const r=n(47),o=new WeakMap,i=(e,t={})=>{if("function"!=typeof e)throw new TypeError("Expected a function");let n,i=0;const s=e.displayName||e.name||"<anonymous>",a=function(...r){if(o.set(a,++i),1===i)n=e.apply(this,r),e=null;else if(!0===t.throw)throw new Error(`Function \`${s}\` can only be called once`);return n};return r(a,e),o.set(a,i),a};e.exports=i,e.exports.default=i,e.exports.callCount=e=>{if(!o.has(e))throw new Error(`The given function \`${e.name}\` is not wrapped by the \`onetime\` package`);return o.get(e)}},function(e,t,n){"use strict";const r=(e,t)=>{for(const n of Reflect.ownKeys(t))Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n));return e};e.exports=r,e.exports.default=r},function(e,t,n){"use strict";const{signalsByName:r}=n(49);e.exports=({stdout:e,stderr:t,all:n,error:o,signal:i,exitCode:s,command:a,escapedCommand:c,timedOut:l,isCanceled:u,killed:f,parsed:{options:{timeout:d}}})=>{s=null===s?void 0:s;const p=void 0===(i=null===i?void 0:i)?void 0:r[i].description,m=`Command ${(({timedOut:e,timeout:t,errorCode:n,signal:r,signalDescription:o,exitCode:i,isCanceled:s})=>e?`timed out after ${t} milliseconds`:s?"was canceled":void 0!==n?"failed with "+n:void 0!==r?`was killed with ${r} (${o})`:void 0!==i?"failed with exit code "+i:"failed")({timedOut:l,timeout:d,errorCode:o&&o.code,signal:i,signalDescription:p,exitCode:s,isCanceled:u})}: ${a}`,h="[object Error]"===Object.prototype.toString.call(o),g=h?`${m}\n${o.message}`:m,b=[g,t,e].filter(Boolean).join("\n");return h?(o.originalMessage=o.message,o.message=b):o=new Error(b),o.shortMessage=g,o.command=a,o.escapedCommand=c,o.exitCode=s,o.signal=i,o.signalDescription=p,o.stdout=e,o.stderr=t,void 0!==n&&(o.all=n),"bufferedData"in o&&delete o.bufferedData,o.failed=!0,o.timedOut=Boolean(l),o.isCanceled=u,o.killed=f&&!l,o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.signalsByNumber=t.signalsByName=void 0;var r=n(2),o=n(50),i=n(10);const s=function(e,{name:t,number:n,description:r,supported:o,action:i,forced:s,standard:a}){return{...e,[t]:{name:t,number:n,description:r,supported:o,action:i,forced:s,standard:a}}},a=(0,o.getSignals)().reduce(s,{});t.signalsByName=a;const c=function(e,t){const n=l(e,t);if(void 0===n)return{};const{name:r,description:o,supported:i,action:s,forced:a,standard:c}=n;return{[e]:{name:r,number:e,description:o,supported:i,action:s,forced:a,standard:c}}},l=function(e,t){const n=t.find(({name:t})=>r.constants.signals[t]===e);return void 0!==n?n:t.find(t=>t.number===e)},u=function(){const e=(0,o.getSignals)(),t=i.SIGRTMAX+1,n=Array.from({length:t},(t,n)=>c(n,e));return Object.assign({},...n)}();t.signalsByNumber=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSignals=void 0;var r=n(2),o=n(51),i=n(10);t.getSignals=function(){const e=(0,i.getRealtimeSignals)();return[...o.SIGNALS,...e].map(s)};const s=function({name:e,number:t,description:n,action:o,forced:i=!1,standard:s}){const{signals:{[e]:a}}=r.constants,c=void 0!==a;return{name:e,number:c?a:t,description:n,supported:c,action:o,forced:i,standard:s}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SIGNALS=void 0;t.SIGNALS=[{name:"SIGHUP",number:1,action:"terminate",description:"Terminal closed",standard:"posix"},{name:"SIGINT",number:2,action:"terminate",description:"User interruption with CTRL-C",standard:"ansi"},{name:"SIGQUIT",number:3,action:"core",description:"User interruption with CTRL-\\",standard:"posix"},{name:"SIGILL",number:4,action:"core",description:"Invalid machine instruction",standard:"ansi"},{name:"SIGTRAP",number:5,action:"core",description:"Debugger breakpoint",standard:"posix"},{name:"SIGABRT",number:6,action:"core",description:"Aborted",standard:"ansi"},{name:"SIGIOT",number:6,action:"core",description:"Aborted",standard:"bsd"},{name:"SIGBUS",number:7,action:"core",description:"Bus error due to misaligned, non-existing address or paging error",standard:"bsd"},{name:"SIGEMT",number:7,action:"terminate",description:"Command should be emulated but is not implemented",standard:"other"},{name:"SIGFPE",number:8,action:"core",description:"Floating point arithmetic error",standard:"ansi"},{name:"SIGKILL",number:9,action:"terminate",description:"Forced termination",standard:"posix",forced:!0},{name:"SIGUSR1",number:10,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGSEGV",number:11,action:"core",description:"Segmentation fault",standard:"ansi"},{name:"SIGUSR2",number:12,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGPIPE",number:13,action:"terminate",description:"Broken pipe or socket",standard:"posix"},{name:"SIGALRM",number:14,action:"terminate",description:"Timeout or timer",standard:"posix"},{name:"SIGTERM",number:15,action:"terminate",description:"Termination",standard:"ansi"},{name:"SIGSTKFLT",number:16,action:"terminate",description:"Stack is empty or overflowed",standard:"other"},{name:"SIGCHLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"posix"},{name:"SIGCLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"other"},{name:"SIGCONT",number:18,action:"unpause",description:"Unpaused",standard:"posix",forced:!0},{name:"SIGSTOP",number:19,action:"pause",description:"Paused",standard:"posix",forced:!0},{name:"SIGTSTP",number:20,action:"pause",description:'Paused using CTRL-Z or "suspend"',standard:"posix"},{name:"SIGTTIN",number:21,action:"pause",description:"Background process cannot read terminal input",standard:"posix"},{name:"SIGBREAK",number:21,action:"terminate",description:"User interruption with CTRL-BREAK",standard:"other"},{name:"SIGTTOU",number:22,action:"pause",description:"Background process cannot write to terminal output",standard:"posix"},{name:"SIGURG",number:23,action:"ignore",description:"Socket received out-of-band data",standard:"bsd"},{name:"SIGXCPU",number:24,action:"core",description:"Process timed out",standard:"bsd"},{name:"SIGXFSZ",number:25,action:"core",description:"File too big",standard:"bsd"},{name:"SIGVTALRM",number:26,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGPROF",number:27,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGWINCH",number:28,action:"ignore",description:"Terminal window size changed",standard:"bsd"},{name:"SIGIO",number:29,action:"terminate",description:"I/O is available",standard:"other"},{name:"SIGPOLL",number:29,action:"terminate",description:"Watched event",standard:"other"},{name:"SIGINFO",number:29,action:"ignore",description:"Request for process information",standard:"other"},{name:"SIGPWR",number:30,action:"terminate",description:"Device running out of power",standard:"systemv"},{name:"SIGSYS",number:31,action:"core",description:"Invalid system call",standard:"other"},{name:"SIGUNUSED",number:31,action:"terminate",description:"Invalid system call",standard:"other"}]},function(e,t,n){"use strict";const r=["stdin","stdout","stderr"],o=e=>{if(!e)return;const{stdio:t}=e;if(void 0===t)return r.map(t=>e[t]);if((e=>r.some(t=>void 0!==e[t]))(e))throw new Error("It's not possible to provide `stdio` in combination with one of "+r.map(e=>`\`${e}\``).join(", "));if("string"==typeof t)return t;if(!Array.isArray(t))throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof t}\``);const n=Math.max(t.length,r.length);return Array.from({length:n},(e,n)=>t[n])};e.exports=o,e.exports.node=e=>{const t=o(e);return"ipc"===t?"ipc":void 0===t||"string"==typeof t?[t,t,t,"ipc"]:t.includes("ipc")?t:[...t,"ipc"]}},function(e,t,n){"use strict";const r=n(2),o=n(54),i=(e,t,n,r)=>{if(!s(t,n,r))return;const o=c(n),i=setTimeout(()=>{e("SIGKILL")},o);i.unref&&i.unref()},s=(e,{forceKillAfterTimeout:t},n)=>a(e)&&!1!==t&&n,a=e=>e===r.constants.signals.SIGTERM||"string"==typeof e&&"SIGTERM"===e.toUpperCase(),c=({forceKillAfterTimeout:e=!0})=>{if(!0===e)return 5e3;if(!Number.isFinite(e)||e<0)throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${e}\` (${typeof e})`);return e};e.exports={spawnedKill:(e,t="SIGTERM",n={})=>{const r=e(t);return i(e,t,n,r),r},spawnedCancel:(e,t)=>{e.kill()&&(t.isCanceled=!0)},setupTimeout:(e,{timeout:t,killSignal:n="SIGTERM"},r)=>{if(0===t||void 0===t)return r;let o;const i=new Promise((r,i)=>{o=setTimeout(()=>{((e,t,n)=>{e.kill(t),n(Object.assign(new Error("Timed out"),{timedOut:!0,signal:t}))})(e,n,i)},t)}),s=r.finally(()=>{clearTimeout(o)});return Promise.race([i,s])},validateTimeout:({timeout:e})=>{if(void 0!==e&&(!Number.isFinite(e)||e<0))throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${e}\` (${typeof e})`)},setExitHandler:async(e,{cleanup:t,detached:n},r)=>{if(!t||n)return r;const i=o(()=>{e.kill()});return r.finally(()=>{i()})}}},function(e,t,n){var r,o=n(55),i=n(56),s=/^win/i.test(process.platform),a=n(57);function c(){f&&(f=!1,i.forEach((function(e){try{process.removeListener(e,u[e])}catch(e){}})),process.emit=h,process.reallyExit=p,r.count-=1)}function l(e,t,n){r.emitted[e]||(r.emitted[e]=!0,r.emit(e,t,n))}"function"!=typeof a&&(a=a.EventEmitter),process.__signal_exit_emitter__?r=process.__signal_exit_emitter__:((r=process.__signal_exit_emitter__=new a).count=0,r.emitted={}),r.infinite||(r.setMaxListeners(1/0),r.infinite=!0),e.exports=function(e,t){o.equal(typeof e,"function","a callback must be provided for exit handler"),!1===f&&d();var n="exit";t&&t.alwaysLast&&(n="afterexit");return r.on(n,e),function(){r.removeListener(n,e),0===r.listeners("exit").length&&0===r.listeners("afterexit").length&&c()}},e.exports.unload=c;var u={};i.forEach((function(e){u[e]=function(){process.listeners(e).length===r.count&&(c(),l("exit",null,e),l("afterexit",null,e),s&&"SIGHUP"===e&&(e="SIGINT"),process.kill(process.pid,e))}})),e.exports.signals=function(){return i},e.exports.load=d;var f=!1;function d(){f||(f=!0,r.count+=1,i=i.filter((function(e){try{return process.on(e,u[e]),!0}catch(e){return!1}})),process.emit=g,process.reallyExit=m)}var p=process.reallyExit;function m(e){process.exitCode=e||0,l("exit",process.exitCode,null),l("afterexit",process.exitCode,null),p.call(process,process.exitCode)}var h=process.emit;function g(e,t){if("exit"===e){void 0!==t&&(process.exitCode=t);var n=h.apply(this,arguments);return l("exit",process.exitCode,null),l("afterexit",process.exitCode,null),n}return h.apply(this,arguments)}},function(e,t){e.exports=require("assert")},function(e,t){e.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"],"win32"!==process.platform&&e.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT"),"linux"===process.platform&&e.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")},function(e,t){e.exports=require("events")},function(e,t,n){"use strict";const r=n(59),o=n(60),i=n(64),s=async(e,t)=>{if(e){e.destroy();try{return await t}catch(e){return e.bufferedData}}},a=(e,{encoding:t,buffer:n,maxBuffer:r})=>{if(e&&n)return t?o(e,{encoding:t,maxBuffer:r}):o.buffer(e,{maxBuffer:r})};e.exports={handleInput:(e,t)=>{void 0!==t&&void 0!==e.stdin&&(r(t)?t.pipe(e.stdin):e.stdin.end(t))},makeAllStream:(e,{all:t})=>{if(!t||!e.stdout&&!e.stderr)return;const n=i();return e.stdout&&n.add(e.stdout),e.stderr&&n.add(e.stderr),n},getSpawnedResult:async({stdout:e,stderr:t,all:n},{encoding:r,buffer:o,maxBuffer:i},c)=>{const l=a(e,{encoding:r,buffer:o,maxBuffer:i}),u=a(t,{encoding:r,buffer:o,maxBuffer:i}),f=a(n,{encoding:r,buffer:o,maxBuffer:2*i});try{return await Promise.all([c,l,u,f])}catch(r){return Promise.all([{error:r,signal:r.signal,timedOut:r.timedOut},s(e,l),s(t,u),s(n,f)])}},validateInputSync:({input:e})=>{if(r(e))throw new TypeError("The `input` option cannot be a stream in sync mode")}}},function(e,t,n){"use strict";const r=e=>null!==e&&"object"==typeof e&&"function"==typeof e.pipe;r.writable=e=>r(e)&&!1!==e.writable&&"function"==typeof e._write&&"object"==typeof e._writableState,r.readable=e=>r(e)&&!1!==e.readable&&"function"==typeof e._read&&"object"==typeof e._readableState,r.duplex=e=>r.writable(e)&&r.readable(e),r.transform=e=>r.duplex(e)&&"function"==typeof e._transform&&"object"==typeof e._transformState,e.exports=r},function(e,t,n){"use strict";const{constants:r}=n(61),o=n(4),{promisify:i}=n(62),s=n(63),a=i(o.pipeline);class c extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}}async function l(e,t){if(!e)throw new Error("Expected a stream");t={maxBuffer:1/0,...t};const{maxBuffer:n}=t,o=s(t);return await new Promise((t,i)=>{const s=e=>{e&&o.getBufferedLength()<=r.MAX_LENGTH&&(e.bufferedData=o.getBufferedValue()),i(e)};(async()=>{try{await a(e,o),t()}catch(e){s(e)}})(),o.on("data",()=>{o.getBufferedLength()>n&&s(new c)})}),o.getBufferedValue()}e.exports=l,e.exports.buffer=(e,t)=>l(e,{...t,encoding:"buffer"}),e.exports.array=(e,t)=>l(e,{...t,array:!0}),e.exports.MaxBufferError=c},function(e,t){e.exports=require("buffer")},function(e,t){e.exports=require("util")},function(e,t,n){"use strict";const{PassThrough:r}=n(4);e.exports=e=>{e={...e};const{array:t}=e;let{encoding:n}=e;const o="buffer"===n;let i=!1;t?i=!(n||o):n=n||"utf8",o&&(n=null);const s=new r({objectMode:i});n&&s.setEncoding(n);let a=0;const c=[];return s.on("data",e=>{c.push(e),i?a=c.length:a+=e.length}),s.getBufferedValue=()=>t?c:o?Buffer.concat(c,a):c.join(""),s.getBufferedLength=()=>a,s}},function(e,t,n){"use strict";const{PassThrough:r}=n(4);e.exports=function(){var e=[],t=new r({objectMode:!0});return t.setMaxListeners(0),t.add=n,t.isEmpty=o,t.on("unpipe",i),Array.prototype.slice.call(arguments).forEach(n),t;function n(r){return Array.isArray(r)?(r.forEach(n),this):(e.push(r),r.once("end",i.bind(null,r)),r.once("error",t.emit.bind(t,"error")),r.pipe(t,{end:!1}),this)}function o(){return 0==e.length}function i(n){!(e=e.filter((function(e){return e!==n}))).length&&t.readable&&t.end()}}},function(e,t,n){"use strict";const r=(async()=>{})().constructor.prototype,o=["then","catch","finally"].map(e=>[e,Reflect.getOwnPropertyDescriptor(r,e)]);e.exports={mergePromise:(e,t)=>{for(const[n,r]of o){const o="function"==typeof t?(...e)=>Reflect.apply(r.value,t(),e):r.value.bind(t);Reflect.defineProperty(e,n,{...r,value:o})}return e},getSpawnedPromise:e=>new Promise((t,n)=>{e.on("exit",(e,n)=>{t({exitCode:e,signal:n})}),e.on("error",e=>{n(e)}),e.stdin&&e.stdin.on("error",e=>{n(e)})})}},function(e,t,n){"use strict";const r=(e,t=[])=>Array.isArray(t)?[e,...t]:[e],o=/^[\w.-]+$/,i=/"/g,s=/ +/g;e.exports={joinCommand:(e,t)=>r(e,t).join(" "),getEscapedCommand:(e,t)=>r(e,t).map(e=>(e=>"string"!=typeof e||o.test(e)?e:`"${e.replace(i,'\\"')}"`)(e)).join(" "),parseCommand:e=>{const t=[];for(const n of e.trim().split(s)){const e=t[t.length-1];e&&e.endsWith("\\")?t[t.length-1]=`${e.slice(0,-1)} ${n}`:t.push(n)}return t}}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,